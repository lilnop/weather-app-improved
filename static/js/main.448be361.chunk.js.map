{"version":3,"sources":["Header.jsx","Weather.jsx","Form.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Weather","props","city","country","className","temperature","humidity","description","error","API_KEY","Form","state","undefined","getWeather","e","preventDefault","target","elements","value","fetch","then","response","json","data","setState","main","temp","name","sys","weather","catch","onSubmit","this","type","placeholder","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gNAYeA,G,YAVA,WACP,OACI,gCACI,mDACA,sF,mCCUDC,EAbC,SAACC,GAET,OACI,6BACKA,EAAMC,MAAQD,EAAME,SAAW,uBAAGC,UAAU,YAAb,aAAmCH,EAAMC,KAAzC,IAAgDD,EAAME,SACrFF,EAAMC,MAAQD,EAAME,SAAW,uBAAGC,UAAU,YAAb,gBAAsCH,EAAMI,aAC3EJ,EAAMC,MAAQD,EAAME,SAAW,uBAAGC,UAAU,YAAb,aAAmCH,EAAMK,UACxEL,EAAMC,MAAQD,EAAME,SAAW,uBAAGC,UAAU,YAAb,eAAqCH,EAAMM,aAC3E,2BAAIN,EAAMO,SCPpBC,EAAU,mCA6EDC,E,2MArEXC,MAAQ,CACJN,iBAAaO,EACbV,UAAMU,EACNT,aAASS,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAGXC,WAAa,SAACC,GACVA,EAAEC,iBAEF,IAAMb,EAAOY,EAAEE,OAAOC,SAASf,KAAKgB,MAC9Bf,EAAUW,EAAEE,OAAOC,SAASd,QAAQe,MAEzBC,MAAM,qDAAD,OAAsDjB,EAAtD,YAA8DC,EAA9D,kBAA+EM,EAA/E,kBACjBW,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OACNrB,GAAQC,EACR,EAAKqB,SAAS,CACVnB,YAAakB,EAAKE,KAAKC,KACvBxB,KAAMqB,EAAKI,KACXxB,QAASoB,EAAKK,IAAIzB,QAClBG,SAAWiB,EAAKE,KAAKnB,SACrBC,YAAcgB,EAAKM,QAAQ,GAAGtB,YAC9BC,MAAO,KAET,EAAKgB,SAAS,CACZnB,iBAAaO,EACbV,UAAMU,EACNT,aAASS,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,iEAGdsB,OAAM,SAAAtB,GAAK,OACR,EAAKgB,SAAS,CACVnB,iBAAaO,EACbV,UAAMU,EACNT,aAASS,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,kE,wEAOnB,OACI,0BAAMuB,SAAYC,KAAKnB,YACnB,2BAAOoB,KAAK,OAAON,KAAK,OAAOO,YAAY,YAC3C,2BAAOD,KAAK,OAAON,KAAK,UAAUO,YAAY,eAC9C,oDAEA,kBAAC,EAAD,CACI7B,YAAa2B,KAAKrB,MAAMN,YACxBH,KAAM8B,KAAKrB,MAAMT,KACjBC,QAAW6B,KAAKrB,MAAMR,QACtBG,SAAU0B,KAAKrB,MAAML,SACrBC,YAAayB,KAAKrB,MAAMJ,YACxBC,MAASwB,KAAKrB,MAAMH,a,GAhErB2B,IAAMC,WCYVC,MAjBf,WACE,OACE,yBAAKjC,UAAU,OACb,6BAASA,UAAU,eACjB,kBAAC,EAAD,OAGF,6BAASA,UAAU,gBAChB,kBAAC,EAAD,SCDWkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.448be361.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () =>{\r\n        return(\r\n            <header>\r\n                <h1>Weather Information</h1>\r\n                <h2>Find out about the temperature,humidity and more...</h2>\r\n            </header>\r\n        )\r\n    \r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\n\r\nconst Weather = (props) =>{\r\n    \r\n        return(\r\n            <div>\r\n                {props.city && props.country && <p className=\"identify\">Location: {props.city},{props.country}</p>}\r\n                {props.city && props.country && <p className=\"identify\">Temperature: {props.temperature}</p>    }      \r\n                {props.city && props.country && <p className=\"identify\">Humidity :{props.humidity}</p>}\r\n                {props.city && props.country && <p className=\"identify\">Conditions :{props.description}</p>}\r\n                <p>{props.error}</p>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport Weather from \"./Weather\";\r\n\r\n\r\nconst API_KEY = \"758bf582115d96b0f230e74ed1295081\";\r\n// const API = `https://api.openweathermap.org/data/2.5/weather?q=Manchester${city},${country}&appid=${API_KEY}&units=metric`;\r\n\r\n\r\n\r\n\r\nclass Form extends React.Component{\r\n\r\n    state = {\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: undefined\r\n    }\r\n\r\n    getWeather = (e) => {\r\n        e.preventDefault();\r\n        \r\n        const city = e.target.elements.city.value;\r\n        const country = e.target.elements.country.value;\r\n\r\n        const API_CALL = fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\r\n            .then(response => response.json())\r\n            .then(data =>\r\n                city && country ?\r\n                this.setState({\r\n                    temperature: data.main.temp,\r\n                    city: data.name,\r\n                    country: data.sys.country,\r\n                    humidity:  data.main.humidity,\r\n                    description:  data.weather[0].description,\r\n                    error: \"\"\r\n                })\r\n                : this.setState({\r\n                    temperature: undefined,\r\n                    city: undefined,\r\n                    country: undefined,\r\n                    humidity: undefined,\r\n                    description: undefined,\r\n                    error: \"Make sure city name and country has been typed correctly.\"\r\n                    })\r\n                )\r\n            .catch(error => \r\n                this.setState({\r\n                    temperature: undefined,\r\n                    city: undefined,\r\n                    country: undefined,\r\n                    humidity: undefined,\r\n                    description: undefined,\r\n                    error: \"Make sure city name and country has been typed correctly.\"\r\n                })\r\n            )\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <form onSubmit = {this.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"city...\"/>\r\n                <input type=\"text\" name=\"country\" placeholder=\"country...\"/>\r\n                <button >Get Weather Info</button>\r\n\r\n                <Weather\r\n                    temperature={this.state.temperature}\r\n                    city={this.state.city}\r\n                    country = {this.state.country}\r\n                    humidity={this.state.humidity}\r\n                    description={this.state.description}\r\n                    error = {this.state.error}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Header from \"./Header\";\nimport Form from \"./Form\";\n\nfunction App() {\n  return (\n    <div className=\"row\">\n      <section className=\"column left\">\n        <Header />        \n      </section>\n\n      <section className=\"column right\">\n         <Form />\n      </section>\n      \n    </div>\n    \n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}